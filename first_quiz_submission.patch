diff --git a/part1/question1.py b/part1/question1.py
index 5c99fdb..c3c6669 100644
--- a/part1/question1.py
+++ b/part1/question1.py
@@ -20,6 +20,8 @@ def get_city_temperature(city):
       return 17
    if city == "San Francisco":
       return 16
+   if city == "New York":
+      return 14
 
 def get_city_weather(city):
 
@@ -29,6 +31,10 @@ def get_city_weather(city):
      sky_condition = "cloudy"
   elif city == "New York":
      sky_condition = "rainy"
+  elif city == "San Francisco":
+     sky_condition = "sunny"
+  elif city == "Quito":
+     sky_condition = "sunny"
 
   temperature = get_city_temperature(city)
 
diff --git a/part1/question2.py b/part1/question2.py
index 34a9b01..e5fb91d 100644
--- a/part1/question2.py
+++ b/part1/question2.py
@@ -15,7 +15,10 @@
 # it. As always, there is a test suite that checks the result. It is in 
 # `question2_test.py.`
 
-swapper = None
+def swap_tuple(tup):
+  return (tup[1], tup[0])
+
+swapper = swap_tuple
 
 def run_swapper(list_of_tuples):
   return list(map(swapper, list_of_tuples))
\ No newline at end of file
diff --git a/part1/question3.py b/part1/question3.py
index 04fab99..d73c326 100644
--- a/part1/question3.py
+++ b/part1/question3.py
@@ -27,7 +27,38 @@
 
 # This function should return an oven instance!
 def make_oven():
-  None
+  class Oven:
+
+    def add(self, item):
+      self.ingredients.append(item)
+
+    def freeze(self):
+      self.temperature = -100
+
+    def boil(self):
+      self.temperature = 100
+
+    def wait(self):
+      pass
+
+    def get_output(self):
+      if self.ingredients == ["lead", "mercury"]:
+        self.output = "gold"
+      elif self.ingredients == ["water", "air"]:
+        self.output = "snow"
+      elif self.ingredients == ["cheese", "dough", "tomato"]:
+        self.output = "pizza"
+      else:
+        self.output = None
+      return self.output
+    
+    def __init__(self):
+      self.ingredients = []
+      self.temperature = 0
+      self.output = None
+
+  return Oven()
+
 
 def alchemy_combine(oven, ingredients, temperature):
   
diff --git a/part1/question3_test.py b/part1/question3_test.py
index 6cb6c89..b31d890 100644
--- a/part1/question3_test.py
+++ b/part1/question3_test.py
@@ -1,3 +1,4 @@
+from question3 import alchemy_combine, make_oven
 def test_alchemy_combine():
 
   assert alchemy_combine(
diff --git a/part1/question4.py b/part1/question4.py
index 1e1b2bf..d47499a 100644
--- a/part1/question4.py
+++ b/part1/question4.py
@@ -22,27 +22,19 @@ import pets_db
 # Write SQL to select the pets that are owned by nobody.
 # The output should be a list of tuples in the format: (<pet name>, <species>, <age>)
 
-sql_pets_owned_by_nobody = """
-
-Your SQL here.
-
-"""
+sql_pets_owned_by_nobody = """SELECT name, species, age FROM animals LEFT JOIN people_animals ON animals.animal_id = people_animals.pet_id WHERE people_animals.owner_id IS NULL;"""
 
 # Part 4.B:
 # Write SQL to select how the number of pets are older than their owners. 
 # The output should be an integer.
 
-sql_pets_older_than_owner = """
-
-Your SQL here.
-
-"""
+sql_pets_older_than_owner = """SELECT COUNT(*) FROM animals JOIN people_animals ON animals.animal_id = people_animals.pet_id JOIN people ON people_animals.owner_id = people.person_id WHERE animals.age > people.age"""
 
 # Part 4.C: BONUS CHALLENGE! 
 # Write SQL to select the pets that are owned by Bessie and nobody else.
 # The output should be a list of tuples in the format: (<person name>, <pet name>, <species>)
-sql_only_owned_by_bessie = """ 
-
-Your SQL here.
-
-"""
\ No newline at end of file
+sql_only_owned_by_bessie = """
+SELECT people.name, animals.name, animals.species FROM animals \
+    JOIN people_animals ON animals.animal_id = people_animals.pet_id JOIN people ON people_animals.owner_id = people.person_id \
+        WHERE people.name = 'bessie' AND people_animals.pet_id \
+            NOT IN (SELECT pet_id FROM people_animals WHERE owner_id != 2) """
\ No newline at end of file
diff --git a/part1/question5.py b/part1/question5.py
index f76654f..6130308 100644
--- a/part1/question5.py
+++ b/part1/question5.py
@@ -18,28 +18,23 @@
 # name text
 # vegetarian integer
 
-sql_create_favorite_foods = """
-
-Your SQL here.
-
+sql_create_favorite_foods = """CREATE TABLE favorite_foods(
+                                food_id integer, 
+                                name text, 
+                                vegetarian integer);
 """
 
 # Part 5.B:
 # Alter the animals and people tables by adding a new column to each called 'favorite_food_id'
 # The test suite will verify the new changes by inserting some new rows. 
 
-sql_alter_tables_with_favorite_food = """
-
-Your SQL here.
-
-"""
+sql_alter_tables_with_favorite_food = """ALTER TABLE animals ADD COLUMN favorite_food_id integer; 
+                                            ALTER TABLE people ADD COLUMN favorite_food_id integer;"""
 
 # Part 5.C:
 # Write a query to select all pets that are vegetarian.
 # THe output should be a list of tuples in the format: (<pet name>, <food name>)
 
-sql_select_all_vegetarian_pets = """
-
-Your SQL here.
-
-"""
\ No newline at end of file
+sql_select_all_vegetarian_pets = """ SELECT animals.name, favorite_foods.name FROM animals \
+                                        JOIN favorite_foods ON animals.favorite_food_id = favorite_foods.food_id \
+                                            WHERE favorite_foods.vegetarian = 1;"""
\ No newline at end of file
diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
index 85742c4..821f1ba 100644
--- a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
+++ b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
@@ -1,9 +1,69 @@
 package org.velezreyes.quiz.question6;
 
-public class VendingMachineImpl {
+import org.velezreyes.quiz.question6.VendingMachine;
+import org.velezreyes.quiz.question6.Drink;
+
+public class VendingMachineImpl implements VendingMachine {
+
+  private int currentMoney;
+
+  public VendingMachineImpl() {
+    currentMoney = 0;
+  }
 
   public static VendingMachine getInstance() {
-    // Fix me!
-    return null;
+    return new VendingMachineImpl();
+  }
+
+  public void insertQuarter() {
+
+    currentMoney += 25;
+
   }
+
+  public Drink pressButton(String name) throws NotEnoughMoneyException, UnknownDrinkException {
+    if (name.equals("ScottCola")) {
+      if (currentMoney >= 75) {
+        currentMoney = 0;
+        Drink drink = new DrinkImpl("ScottCola", true);
+        return drink;
+      }
+      else {
+        throw new NotEnoughMoneyException();
+      }
+    }
+    
+    else if (name.equals("KarenTea")) {
+      if (currentMoney >= 100) {
+        currentMoney = 0;
+        Drink drink = new DrinkImpl("KarenTea", false);
+        return drink;
+      }
+      else {
+        throw new NotEnoughMoneyException();
+      }
+    }
+    else {
+      throw new UnknownDrinkException();
+    }
+  }
+
+  private class DrinkImpl implements Drink {
+    private String name;
+    private boolean isFizzy;
+
+    public DrinkImpl(String name, boolean isFizzy) {
+      this.name = name;
+      this.isFizzy = isFizzy;
+    }
+
+    public String getName() {
+      return name;
+    }
+
+    public boolean isFizzy() {
+      return isFizzy;
+    }
+  }
+
 }
